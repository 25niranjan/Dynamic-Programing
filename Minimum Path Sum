//recursive Approch
class Solution {
    public int minPathSum(int[][] arr) {
        int m=arr.length;
        int n=arr[0].length;
        return f(m-1,n-1,arr);
    }
    public int f(int i,int j,int arr[][])
    {
        if(i==0 &&j==0) return arr[0][0];
        if(i<0 ||j<0) return 999;
        int up=arr[i][j]+f(i-1,j,arr);
        int left= arr[i][j]+f(i,j-1,arr);
        return Math.min(up,left);
    }
}

//tabulation


class Solution {
    static int min=Integer.MAX_VALUE;
    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int dp[][]=new int [n][m];
        for(int k=0;k<n;k++){
            for(int l=0;l<m;l++){
                dp[k][l]=-1;
            }
        }
       return  helper(n-1,m-1,grid,dp);
        
    }
    private int helper(int i,int j,int [][]grid,int dp[][]){
if(i==0 && j==0){
    return grid[0][0];
}
if(i<0 || j<0){
    return 999999;
}
if(dp[i][j]!=-1){
    return dp[i][j];
}
int left=grid[i][j]+helper(i-1,j,grid,dp);
int right=grid[i][j]+helper(i,j-1,grid,dp);
min=Math.min(left,right);
return dp[i][j]=min;
    }
}
